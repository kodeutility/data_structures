-Python supports OOP.
-In Python, as well as in any other object-oriented programming language, we define a class to be a description of what the data look like (the state) and what the data can do (the behavior).
-Classes are analogous to abstract data types because a user of a class only sees the state and behavior of a data item.
-Data items are called objects in the object-oriented paradigm. 
-An object is an instance of a class.

Built-in Atomic data types
--------------------------
-Python has two main built-in numeric classes that implement the "integer" and "floating point" data types.
-These Python classes are called "int" and "float".
-The standard arithmetic operations, +, -, *, /, and ** (exponentiation), can be used with parentheses forcing the order of operations away from normal operator precedence.
-Other very useful operations are the remainder (modulo) operator, %, and integer division, //.
-Note that when two integers are divided, the result is a floating point. 
-The integer division operator returns the integer portion of the quotient by truncating any fractional part.
-The boolean data type, implemented as the Python bool class, will be quite useful for representing truth values. 
-There's also a built-in function known as bool(), which converts a given value into a boolean value (i.e. either True or False). 
-It's also good to know that almost anything as an input to this function would output "True", unless the input is taken from the following which gives "False":

1. {} (empty dictionary)
2. [] (empty list)
3. () (empty tuple)
4. set() (empty set)
5. "" or ''
6. None
7. 0
8. 0.0

-boolean operators: "and", "or", "not".
-Identifiers are used in programming languages as names.
-Identifiers start with a letter or an underscore (_), are case sensitive, and can be of any length.
-A Python variable is created when a name is used for the first time on the left-hand side of an assignment statement.
-The variable will hold a reference to a piece of data and not the data itself.

Built-in collection datatype
----------------------------
-Python also has other built-in collection classes.
-Lists, strings, and tuples are ordered collections that are very similar in general structure but have specific differences that must be understood for them to be used properly. 
-Sets and dictionaries are unordered collections.

List
----
-A list is an ordered collection of zero or more references to Python data objects. 
-Lists are written as comma-delimited values enclosed in square brackets. 
-The empty list is simply [ ]. 
-Lists are heterogeneous, meaning that the data objects need not all be from the same class and the collection can be assigned to a variable
-When Python evaluates a list, the list itself is returned. 
-However, in order to remember the list for later processing, its reference needs to be assigned to a variable.
-Since lists are considered to be sequentially ordered, they support a number of operations that can be applied to any Python sequence.

-----------------------------------------------------------------------
Operation Name  |  Operator |     Explanation
-----------------------------------------------------------------------
indexing	| [ ]	    | Access an element of a sequence
concatenation	| +	    | Combine sequences together
repetition	| *	    | Concatenate a repeated number of times
membership	| in	    | Ask whether an item is in a sequence
length	        | len	    | Ask the number of items in the sequence
slicing	        | [ : ]	    | Extract a part of a sequence
------------------------------------------------------------------------

-Sometimes, you will want to initialize a list. This can quickly be accomplished by using repetition. For example,

>>> myList = [0] * 6
>>> myList
[0, 0, 0, 0, 0, 0]

-One very important aside relating to the repetition operator is that the result is a repetition of references to the data objects in the sequence.

i/p:
myList = [1,2,3,4]
A = [myList]*3
print(A)
myList[2]=45
print(A)

o/p:
[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]
[[1, 2, 45, 4], [1, 2, 45, 4], [1, 2, 45, 4]]

-------------------------------------------------------------------------------------------
Method Name	|       Use		|          Explanation
-------------------------------------------------------------------------------------------
append		|  alist.append(item)	|  Adds a new item to the end of a list
insert		|  alist.insert(i,item)	|  Inserts an item at the ith position in a list
pop		|  alist.pop()		|  Removes and returns the last item in a list
pop		|  alist.pop(i)		|  Removes and returns the ith item in a list
sort		|  alist.sort()		|  Modifies a list to be sorted
reverse		|  alist.reverse()	|  Modifies a list to be in reverse order
del		|  del alist[i]		|  Deletes the item in the ith position
index		|  alist.index(item)	|  Returns the index of the first occurrence of item
count		|  alist.count(item)	|  Returns the number of occurrences of item
remove		|  alist.remove(item)	|  Removes the first occurrence of item
-------------------------------------------------------------------------------------------

-"range" produces a range object that represents a sequence of values. 
-By using the list function, it is possible to see the value of the range object as a list. 

>>> range(10)
range(0, 10)
>>> list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> range(5,10)
range(5, 10)
>>> list(range(5,10))
[5, 6, 7, 8, 9]
>>> list(range(5,10,2))
[5, 7, 9]
>>> list(range(10,1,-1))
[10, 9, 8, 7, 6, 5, 4, 3, 2]

-The range object represents a sequence of integers. By default, it will start with 0.
-If you provide more parameters, it will start and end at particular points and can even skip items. 

String
------
-Strings are sequential collections of zero or more letters, numbers and other symbols. 
-We call these letters, numbers and other symbols characters. 
-Literal string values are differentiated from identifiers by using quotation marks (either single or double).
-A major difference between lists and strings is that lists can be modified while strings cannot. This is referred to as mutability.
-Lists are mutable; strings are immutable. 
-For example, you can change an item in a list by using indexing and assignment. With a string that change is not allowed.

Tuple
-----
-Tuples are very similar to lists in that they are heterogeneous sequences of data. 
-The difference is that a tuple is immutable, like a string.
-A tuple cannot be changed. Tuples are written as comma-delimited values enclosed in parentheses.

Set
---
-A set is an unordered collection of zero or more mutable Python data objects.
-Sets do not allow duplicates and are written as comma-delimited values enclosed in curly braces. 
-The empty set is represented by set().
-Sets are heterogeneous, and the collection can be assigned to a variable
-Even though sets are not considered to be sequential, they do support a few of the familiar operations .

-------------------------------------------------------------------------------------------------------
Operation Name	| Operator	   |  Explanation
-------------------------------------------------------------------------------------------------------
membership	|	in	   |  Set membership
length		|	len	   |  Returns the cardinality of the set
|		| aset | otherset  |  Returns a new set with all elements from both sets
&		| aset & otherset  |  Returns a new set with only those elements common to both sets
-		| aset - otherset  |  Returns a new set with all items from the first set not in second
<=		| aset <= otherset |  Asks whether all elements of the first set are in the second
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
Method Name	|        Use	                 |   Explanation
-------------------------------------------------------------------------------------------------------
union	        |    aset.union(otherset)	 |   Returns a new set with all elements from both sets
intersection	|    aset.intersection(otherset) |   Returns a new set with only those elements common to both sets
difference	|    aset.difference(otherset)	 |   Returns a new set with all items from first set not in second
issubset	|    aset.issubset(otherset)	 |   Asks whether all elements of one set are in the other
add	        |    aset.add(item)	         |   Adds item to the set
remove	        |    aset.remove(item)	         |   Removes item from the set
pop	        |    aset.pop()	                 |   Removes an arbitrary element from the set
clear	        |    aset.clear()	         |   Removes all elements from the set
-------------------------------------------------------------------------------------------------------

Dictionary
----------
-Dictionaries are collections of associated pairs of items where each pair consists of a key and a value. 
-This key-value pair is typically written as key:value.
-Dictionaries are written as comma-delimited key:value pairs enclosed in curly braces. 
-It is important to note that the dictionary is maintained in no particular order with respect to the keys.
-We can manipulate a dictionary by accessing a value via its key or by adding another key-value pair. 
-The placement of a key is dependent on the idea of “hashing,”
-The syntax for access looks much like a sequence access except that instead of using the index of the item we use the key value. To add a new value is similar.

-----------------------------------------------------------------------------------
Operator   |	Use	     |    Explanation
-----------------------------------------------------------------------------------
[]	   |  myDict[k]	     |    Returns the value associated with k, otherwise its an error
in	   |  key in adict   |    Returns True if key is in the dictionary, False otherwise
del	   |  del adict[key] |    Removes the entry from the dictionary
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
Method Name |	Use	        |     Explanation
-----------------------------------------------------------------------------------
keys	    |  adict.keys()     |     Returns the keys of the dictionary in a dict_keys object
values	    |  adict.values()   |     Returns the values of the dictionary in a dict_values object
items	    |  adict.items()    |     Returns the key-value pairs in a dict_items object
get	    |  adict.get(k)     |     Returns the value associated with k, None otherwise
get	    |  adict.get(k,alt) |     Returns the value associated with k, alt otherwise
-----------------------------------------------------------------------------------