Why study Data Structures, Algorithms and abstract data types?
--------------------------------------------------------------
-To manage the complexity of problems and the problem solving process, computer scientists use abstraction to allow them to focus on the big picture without getting lost in the details.
-By creating models of the problem domain, we are able to utilize a better and more efficient problem solving process.
-These models allow us to describe the data that our algorithms will manipulate in a much more consistent way with respect to the problem itself.
-Similar to procedural abstraction as a process that hides the details of a particular function to allow users to view it at a high level.
-Data abstraction - ADT(abstract data type) is a logical description of how we view the data and the operations that are allowed without the regard to how they will be implemented.
-This means we are concerned only with what the data is respresenting and not how it will eventually be constructed.
-By providing this level of abstraction we are creating an "encapsulation" around the data.
-information hiding - the idea is that by encapsulating details of the implementation we are hiding from the user's view.
- [[implementation]operation] <-(interface)-> User
-The user interacts with the operations with the interface, using the operations that have been specified by the abstract data type.
-The abstract data type is the interface/shell the user interacts with.
-The implementation is hidden one level deeper.
-The user is not concerned with the details of the implementation.
-Data Structure - The implementation of an abstract data type
-The data structure will require that we provide a physical view of the data using some collection of programming constructs and primitive data types.
-The separation of these two perspectives will allow us to define the complex data models for our problems without giving any indication as to the details of how the model will actually be built. 
-This provides an implementation-independent view of the data. 
-Since there will usually be many different ways to implement an abstract data type, this implementation independence allows the programmer to switch the details of the implementation without changing the way the user of the data interacts with it. 
-The user can remain focused on the problem-solving process.

Algorithms
----------
-Algorithms are often quite different from one another.
-It is entirely possible that there are many different ways to implement the details to compute the square root function. 
-One algorithm may use many fewer resources than another. 
-One algorithm might take 10 times as long to return the result as the other. 
-We would like to have some way to compare these two solutions. 
-Even though they both work, one is perhaps “better” than the other. 
-We might suggest that one is more efficient or that one simply works faster or uses less memory. 
As we study algorithms, we can learn analysis techniques that allow us to compare and contrast solutions based solely on their own characteristics, not the characteristics of the program or computer used to implement them.
-We may have a problem that is intractable, meaning that there is no algorithm that can solve the problem in a realistic amount of time. 
-It is important to be able to distinguish between those problems that have solutions, those that do not, and those where solutions exist but require too much time or other resources to work reasonably.
